name: Onix CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test-go:
    name: Test Go Microservices
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.24'

    - name: Run Go Tests and Generate Merged Coverage
      run: |
          go test -coverprofile=coverage.out -coverpkg=./... ./...
                    

    - name: Convert merged coverage to HTML
      run: |
          go tool cover -html=coverage.out -o coverage.html

    - name: Upload Go coverage report
      uses: actions/upload-artifact@v4
      with:
          name: go-coverage
          path: coverage.html

  build-go-binaries:
    name: Build Go Binaries
    runs-on: ubuntu-latest
    needs: test-go
    strategy:
      matrix:
        service: [admin, gateway, registry, subscriber]
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.24'

    - name: Build
      run: |
        cd cmd/${{ matrix.service }}
        go build -v -o ../../build/${{ matrix.service }} .

  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build-go-binaries
    strategy:
      matrix:
        service: [gateway, registry, registry-admin, subscriber]
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker Image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.${{ matrix.service }}
        platforms: linux/amd64
        push: false
        tags: ${{ matrix.service }}:latest

  build-python-installer:
    name: Build Python Installer Backend
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.12'

    - name: Install Dependencies
      run: |
          python -m pip install --upgrade pip
          pip install coverage
          pip install -r deploy/onix-installer/backend/requirements.txt --require-hashes

    - name: Run Python Tests with Coverage
      run: |
          cd deploy/onix-installer/backend
          coverage run -m unittest discover tests

    - name: Generate Python coverage report
      run: |
          cd deploy/onix-installer/backend
          coverage html -d htmlcov

    - name: Upload Python coverage report
      uses: actions/upload-artifact@v4
      with:
          name: python-coverage
          path: deploy/onix-installer/backend/htmlcov

  build-frontend-installer:
    name: Build Angular Installer Frontend
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 'lts/*'

    - name: Install Dependencies
      run: |
        cd deploy/onix-installer/frontend
        npm install
   
    - name: Run Tests with Coverage
      run: |
        cd deploy/onix-installer/frontend
        npm test -- --watch=false --browsers=ChromeHeadless --code-coverage

    - name: Upload Frontend coverage report
      uses: actions/upload-artifact@v4
      with:
          name: frontend-coverage
          path: deploy/onix-installer/frontend/coverage

    - name: Build Frontend
      run: |
        cd deploy/onix-installer/frontend
        npm run build -- --configuration production
  
  deploy-pages:
    name: Deploy Reports to GitHub Pages
    runs-on: ubuntu-latest
    needs: [test-go, build-python-installer, build-frontend-installer]
    # Only run this job when pushing to the main branch
    if: github.ref == 'refs/heads/main'
    permissions:
      pages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Pages
        uses: actions/configure-pages@v4

      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./coverage-reports 

      - name: Create index page and organize reports
        run: |
          mv ./coverage-reports/go-coverage/coverage.html ./coverage-reports/go-coverage.html
          mv ./coverage-reports/python-coverage ./coverage-reports/python
          mv ./coverage-reports/frontend-coverage ./coverage-reports/frontend
          
          echo '<html><head><title>Test Coverage Reports</title></head><body>' > ./coverage-reports/index.html
          echo '<h1>Onix Test Coverage Reports</h1>' >> ./coverage-reports/index.html
          echo '<ul>' >> ./coverage-reports/index.html
          echo '<li><a href="go-coverage.html">Go Microservices Coverage</a></li>' >> ./coverage-reports/index.html
          echo '<li><a href="python/index.html">Python Installer Coverage</a></li>' >> ./coverage-reports/index.html
          echo '<li><a href="frontend/frontend-test/index.html">Frontend Installer Coverage</a></li>' >> ./coverage-reports/index.html
          echo '</ul></body></html>' >> ./coverage-reports/index.html

      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./coverage-reports

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  build-and-run-onixctl:
    name: 'Build onixctl, Plugins, and Adapter Image'
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4

      - name: 'Set up Go'
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v3

      - name: 'Build and Run onixctl'
        run: |
          go build ./cmd/onixctl && ./onixctl --config deploy/onix-installer/adapter_artifacts/source.yaml
